/***************************************************************************
 *   Copyright (C) 2009 by zienek   *
 *   zienekp@wp.pl   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#include "trakkermodel.h"
#include "math.h"

#include <complex.h>
#include <fftw3.h>
#include <math.h>

#include <QFile>
#include <QString>
#include <QByteArray>
#include <QDebug>
#include <QTime>

static const int windowPlotWidth      = 128;
static const int correlationPlotWidth = 512 ;
static const int windowedPlotWidth    = 252;
static const int inputPlotWidth       = 512;
static const int bufferSize           = 512;

static const float rectangularWindow [512] = {
0.000001, 0.000001, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.000001, 0.000001};

static const float triangularWindow [512] ={
0.003906, 0.007812, 0.011719, 0.015625, 0.019531, 0.023438, 0.027344, 0.031250,
0.035156, 0.039062, 0.042969, 0.046875, 0.050781, 0.054688, 0.058594, 0.062500,
0.066406, 0.070312, 0.074219, 0.078125, 0.082031, 0.085938, 0.089844, 0.093750,
0.097656, 0.101562, 0.105469, 0.109375, 0.113281, 0.117188, 0.121094, 0.125000,
0.128906, 0.132812, 0.136719, 0.140625, 0.144531, 0.148438, 0.152344, 0.156250,
0.160156, 0.164062, 0.167969, 0.171875, 0.175781, 0.179688, 0.183594, 0.187500,
0.191406, 0.195312, 0.199219, 0.203125, 0.207031, 0.210938, 0.214844, 0.218750,
0.222656, 0.226562, 0.230469, 0.234375, 0.238281, 0.242188, 0.246094, 0.250000,
0.253906, 0.257812, 0.261719, 0.265625, 0.269531, 0.273438, 0.277344, 0.281250,
0.285156, 0.289062, 0.292969, 0.296875, 0.300781, 0.304688, 0.308594, 0.312500,
0.316406, 0.320312, 0.324219, 0.328125, 0.332031, 0.335938, 0.339844, 0.343750,
0.347656, 0.351562, 0.355469, 0.359375, 0.363281, 0.367188, 0.371094, 0.375000,
0.378906, 0.382812, 0.386719, 0.390625, 0.394531, 0.398438, 0.402344, 0.406250,
0.410156, 0.414062, 0.417969, 0.421875, 0.425781, 0.429688, 0.433594, 0.437500,
0.441406, 0.445312, 0.449219, 0.453125, 0.457031, 0.460938, 0.464844, 0.468750,
0.472656, 0.476562, 0.480469, 0.484375, 0.488281, 0.492188, 0.496094, 0.500000,
0.503906, 0.507812, 0.511719, 0.515625, 0.519531, 0.523438, 0.527344, 0.531250,
0.535156, 0.539062, 0.542969, 0.546875, 0.550781, 0.554688, 0.558594, 0.562500,
0.566406, 0.570312, 0.574219, 0.578125, 0.582031, 0.585938, 0.589844, 0.593750,
0.597656, 0.601562, 0.605469, 0.609375, 0.613281, 0.617188, 0.621094, 0.625000,
0.628906, 0.632812, 0.636719, 0.640625, 0.644531, 0.648438, 0.652344, 0.656250,
0.660156, 0.664062, 0.667969, 0.671875, 0.675781, 0.679688, 0.683594, 0.687500,
0.691406, 0.695312, 0.699219, 0.703125, 0.707031, 0.710938, 0.714844, 0.718750,
0.722656, 0.726562, 0.730469, 0.734375, 0.738281, 0.742188, 0.746094, 0.750000,
0.753906, 0.757812, 0.761719, 0.765625, 0.769531, 0.773438, 0.777344, 0.781250,
0.785156, 0.789062, 0.792969, 0.796875, 0.800781, 0.804688, 0.808594, 0.812500,
0.816406, 0.820312, 0.824219, 0.828125, 0.832031, 0.835938, 0.839844, 0.843750,
0.847656, 0.851562, 0.855469, 0.859375, 0.863281, 0.867188, 0.871094, 0.875000,
0.878906, 0.882812, 0.886719, 0.890625, 0.894531, 0.898438, 0.902344, 0.906250,
0.910156, 0.914062, 0.917969, 0.921875, 0.925781, 0.929688, 0.933594, 0.937500,
0.941406, 0.945312, 0.949219, 0.953125, 0.957031, 0.960938, 0.964844, 0.968750,
0.972656, 0.976562, 0.980469, 0.984375, 0.988281, 0.992188, 0.996094, 1.000000,
1.000000, 0.996094, 0.992188, 0.988281, 0.984375, 0.980469, 0.976562, 0.972656,
0.968750, 0.964844, 0.960938, 0.957031, 0.953125, 0.949219, 0.945312, 0.941406,
0.937500, 0.933594, 0.929688, 0.925781, 0.921875, 0.917969, 0.914062, 0.910156,
0.906250, 0.902344, 0.898438, 0.894531, 0.890625, 0.886719, 0.882812, 0.878906,
0.875000, 0.871094, 0.867188, 0.863281, 0.859375, 0.855469, 0.851562, 0.847656,
0.843750, 0.839844, 0.835938, 0.832031, 0.828125, 0.824219, 0.820312, 0.816406,
0.812500, 0.808594, 0.804688, 0.800781, 0.796875, 0.792969, 0.789062, 0.785156,
0.781250, 0.777344, 0.773438, 0.769531, 0.765625, 0.761719, 0.757812, 0.753906,
0.750000, 0.746094, 0.742188, 0.738281, 0.734375, 0.730469, 0.726562, 0.722656,
0.718750, 0.714844, 0.710938, 0.707031, 0.703125, 0.699219, 0.695312, 0.691406,
0.687500, 0.683594, 0.679688, 0.675781, 0.671875, 0.667969, 0.664062, 0.660156,
0.656250, 0.652344, 0.648438, 0.644531, 0.640625, 0.636719, 0.632812, 0.628906,
0.625000, 0.621094, 0.617188, 0.613281, 0.609375, 0.605469, 0.601562, 0.597656,
0.593750, 0.589844, 0.585938, 0.582031, 0.578125, 0.574219, 0.570312, 0.566406,
0.562500, 0.558594, 0.554688, 0.550781, 0.546875, 0.542969, 0.539062, 0.535156,
0.531250, 0.527344, 0.523438, 0.519531, 0.515625, 0.511719, 0.507812, 0.503906,
0.500000, 0.496094, 0.492188, 0.488281, 0.484375, 0.480469, 0.476562, 0.472656,
0.468750, 0.464844, 0.460938, 0.457031, 0.453125, 0.449219, 0.445312, 0.441406,
0.437500, 0.433594, 0.429688, 0.425781, 0.421875, 0.417969, 0.414062, 0.410156,
0.406250, 0.402344, 0.398438, 0.394531, 0.390625, 0.386719, 0.382812, 0.378906,
0.375000, 0.371094, 0.367188, 0.363281, 0.359375, 0.355469, 0.351562, 0.347656,
0.343750, 0.339844, 0.335938, 0.332031, 0.328125, 0.324219, 0.320312, 0.316406,
0.312500, 0.308594, 0.304688, 0.300781, 0.296875, 0.292969, 0.289062, 0.285156,
0.281250, 0.277344, 0.273438, 0.269531, 0.265625, 0.261719, 0.257812, 0.253906,
0.250000, 0.246094, 0.242188, 0.238281, 0.234375, 0.230469, 0.226562, 0.222656,
0.218750, 0.214844, 0.210938, 0.207031, 0.203125, 0.199219, 0.195312, 0.191406,
0.187500, 0.183594, 0.179688, 0.175781, 0.171875, 0.167969, 0.164062, 0.160156,
0.156250, 0.152344, 0.148438, 0.144531, 0.140625, 0.136719, 0.132812, 0.128906,
0.125000, 0.121094, 0.117188, 0.113281, 0.109375, 0.105469, 0.101562, 0.097656,
0.093750, 0.089844, 0.085938, 0.082031, 0.078125, 0.074219, 0.070312, 0.066406,
0.062500, 0.058594, 0.054688, 0.050781, 0.046875, 0.042969, 0.039062, 0.035156,
0.031250, 0.027344, 0.023438, 0.019531, 0.015625, 0.011719, 0.007812, 0.003906};

static const float blackmanWindow [512] = {
0.000001, 0.000014, 0.000054, 0.000123, 0.000218, 0.000341, 0.000491, 0.000669,
0.000874, 0.001107, 0.001368, 0.001657, 0.001975, 0.002321, 0.002695, 0.003099,
0.003532, 0.003994, 0.004486, 0.005008, 0.005560, 0.006143, 0.006757, 0.007403,
0.008080, 0.008789, 0.009531, 0.010306, 0.011114, 0.011956, 0.012832, 0.013743,
0.014689, 0.015671, 0.016689, 0.017743, 0.018835, 0.019964, 0.021132, 0.022338,
0.023584, 0.024869, 0.026195, 0.027562, 0.028970, 0.030420, 0.031914, 0.033450,
0.035030, 0.036654, 0.038324, 0.040039, 0.041800, 0.043608, 0.045463, 0.047366,
0.049318, 0.051318, 0.053369, 0.055469, 0.057621, 0.059823, 0.062078, 0.064385,
0.066744, 0.069158, 0.071625, 0.074147, 0.076725, 0.079357, 0.082046, 0.084791,
0.087594, 0.090453, 0.093371, 0.096347, 0.099382, 0.102476, 0.105629, 0.108842,
0.112116, 0.115450, 0.118845, 0.122301, 0.125818, 0.129397, 0.133039, 0.136742,
0.140508, 0.144336, 0.148227, 0.152181, 0.156197, 0.160277, 0.164420, 0.168626,
0.172895, 0.177227, 0.181622, 0.186081, 0.190602, 0.195186, 0.199833, 0.204543,
0.209314, 0.214148, 0.219044, 0.224001, 0.229020, 0.234099, 0.239240, 0.244440,
0.249700, 0.255020, 0.260398, 0.265835, 0.271329, 0.276881, 0.282490, 0.288154,
0.293874, 0.299649, 0.305477, 0.311359, 0.317293, 0.323279, 0.329316, 0.335403,
0.341538, 0.347722, 0.353953, 0.360231, 0.366553, 0.372920, 0.379330, 0.385781,
0.392274, 0.398807, 0.405377, 0.411986, 0.418630, 0.425309, 0.432022, 0.438767,
0.445543, 0.452349, 0.459183, 0.466043, 0.472929, 0.479839, 0.486771, 0.493724,
0.500696, 0.507687, 0.514693, 0.521714, 0.528748, 0.535794, 0.542849, 0.549913,
0.556983, 0.564058, 0.571135, 0.578214, 0.585293, 0.592369, 0.599442, 0.606509,
0.613568, 0.620618, 0.627656, 0.634682, 0.641693, 0.648687, 0.655663, 0.662618,
0.669551, 0.676460, 0.683342, 0.690197, 0.697023, 0.703816, 0.710576, 0.717301,
0.723988, 0.730636, 0.737243, 0.743807, 0.750326, 0.756799, 0.763223, 0.769596,
0.775917, 0.782184, 0.788395, 0.794549, 0.800642, 0.806674, 0.812643, 0.818547,
0.824384, 0.830153, 0.835851, 0.841477, 0.847030, 0.852507, 0.857907, 0.863228,
0.868469, 0.873627, 0.878702, 0.883692, 0.888595, 0.893410, 0.898135, 0.902769,
0.907310, 0.911757, 0.916109, 0.920363, 0.924520, 0.928576, 0.932532, 0.936386,
0.940136, 0.943782, 0.947322, 0.950755, 0.954080, 0.957296, 0.960402, 0.963397,
0.966280, 0.969050, 0.971706, 0.974247, 0.976673, 0.978982, 0.981175, 0.983249,
0.985205, 0.987042, 0.988759, 0.990356, 0.991832, 0.993186, 0.994419, 0.995530,
0.996519, 0.997384, 0.998126, 0.998745, 0.999241, 0.999613, 0.999861, 0.999985,
0.999985, 0.999861, 0.999613, 0.999241, 0.998746, 0.998127, 0.997384, 0.996519,
0.995530, 0.994420, 0.993187, 0.991832, 0.990356, 0.988759, 0.987042, 0.985205,
0.983249, 0.981175, 0.978983, 0.976673, 0.974247, 0.971706, 0.969050, 0.966280,
0.963397, 0.960402, 0.957296, 0.954080, 0.950755, 0.947322, 0.943782, 0.940136,
0.936386, 0.932533, 0.928577, 0.924520, 0.920364, 0.916109, 0.911758, 0.907311,
0.902770, 0.898136, 0.893411, 0.888596, 0.883693, 0.878703, 0.873628, 0.868469,
0.863228, 0.857907, 0.852507, 0.847030, 0.841478, 0.835852, 0.830153, 0.824385,
0.818548, 0.812644, 0.806675, 0.800643, 0.794549, 0.788396, 0.782185, 0.775918,
0.769597, 0.763223, 0.756800, 0.750327, 0.743808, 0.737244, 0.730637, 0.723989,
0.717301, 0.710577, 0.703817, 0.697023, 0.690198, 0.683343, 0.676460, 0.669552,
0.662619, 0.655663, 0.648688, 0.641694, 0.634683, 0.627657, 0.620618, 0.613569,
0.606510, 0.599443, 0.592370, 0.585294, 0.578215, 0.571136, 0.564058, 0.556984,
0.549914, 0.542850, 0.535795, 0.528749, 0.521715, 0.514694, 0.507687, 0.500697,
0.493725, 0.486772, 0.479840, 0.472930, 0.466044, 0.459184, 0.452350, 0.445544,
0.438768, 0.432023, 0.425310, 0.418631, 0.411987, 0.405378, 0.398807, 0.392275,
0.385782, 0.379330, 0.372921, 0.366554, 0.360231, 0.353954, 0.347723, 0.341539,
0.335403, 0.329317, 0.323280, 0.317294, 0.311360, 0.305478, 0.299649, 0.293875,
0.288155, 0.282490, 0.276882, 0.271330, 0.265835, 0.260399, 0.255020, 0.249701,
0.244441, 0.239240, 0.234100, 0.229020, 0.224002, 0.219044, 0.214149, 0.209315,
0.204543, 0.199834, 0.195187, 0.190603, 0.186081, 0.181623, 0.177228, 0.172895,
0.168626, 0.164420, 0.160278, 0.156198, 0.152181, 0.148227, 0.144336, 0.140508,
0.136742, 0.133039, 0.129398, 0.125819, 0.122301, 0.118845, 0.115450, 0.112116,
0.108843, 0.105629, 0.102476, 0.099382, 0.096347, 0.093371, 0.090454, 0.087594,
0.084792, 0.082046, 0.079358, 0.076725, 0.074148, 0.071626, 0.069158, 0.066745,
0.064385, 0.062078, 0.059823, 0.057621, 0.055470, 0.053369, 0.051319, 0.049318,
0.047366, 0.045463, 0.043608, 0.041800, 0.040039, 0.038324, 0.036655, 0.035030,
0.033450, 0.031914, 0.030421, 0.028970, 0.027562, 0.026195, 0.024869, 0.023584,
0.022338, 0.021132, 0.019964, 0.018835, 0.017743, 0.016689, 0.015671, 0.014689,
0.013743, 0.012832, 0.011956, 0.011114, 0.010306, 0.009531, 0.008789, 0.008080,
0.007403, 0.006757, 0.006143, 0.005560, 0.005008, 0.004486, 0.003994, 0.003532,
0.003099, 0.002695, 0.002321, 0.001975, 0.001657, 0.001368, 0.001107, 0.000874,
0.000669, 0.000491, 0.000341, 0.000218, 0.000123, 0.000054, 0.000014, 0.000001};

static const float hammingWindow [512] = {
0.080000, 0.080035, 0.080139, 0.080313, 0.080556, 0.080869, 0.081251, 0.081703,
0.082224, 0.082814, 0.083473, 0.084201, 0.084998, 0.085864, 0.086799, 0.087802,
0.088873, 0.090013, 0.091221, 0.092496, 0.093839, 0.095250, 0.096728, 0.098273,
0.099884, 0.101563, 0.103307, 0.105118, 0.106994, 0.108936, 0.110943, 0.113014,
0.115151, 0.117351, 0.119616, 0.121944, 0.124335, 0.126789, 0.129306, 0.131884,
0.134525, 0.137226, 0.139989, 0.142812, 0.145695, 0.148638, 0.151639, 0.154700,
0.157819, 0.160995, 0.164229, 0.167520, 0.170867, 0.174270, 0.177728, 0.181241,
0.184808, 0.188429, 0.192103, 0.195829, 0.199608, 0.203438, 0.207319, 0.211250,
0.215231, 0.219261, 0.223340, 0.227466, 0.231640, 0.235860, 0.240126, 0.244438,
0.248794, 0.253195, 0.257638, 0.262125, 0.266653, 0.271223, 0.275833, 0.280483,
0.285173, 0.289901, 0.294667, 0.299470, 0.304309, 0.309184, 0.314094, 0.319038,
0.324015, 0.329025, 0.334067, 0.339140, 0.344244, 0.349377, 0.354539, 0.359729,
0.364946, 0.370189, 0.375459, 0.380753, 0.386071, 0.391413, 0.396777, 0.402162,
0.407569, 0.412995, 0.418441, 0.423905, 0.429387, 0.434885, 0.440399, 0.445929,
0.451472, 0.457029, 0.462599, 0.468180, 0.473772, 0.479374, 0.484985, 0.490604,
0.496231, 0.501865, 0.507504, 0.513149, 0.518797, 0.524449, 0.530102, 0.535758,
0.541414, 0.547070, 0.552724, 0.558377, 0.564027, 0.569674, 0.575316, 0.580952,
0.586583, 0.592206, 0.597821, 0.603428, 0.609025, 0.614612, 0.620187, 0.625751,
0.631301, 0.636838, 0.642359, 0.647866, 0.653356, 0.658829, 0.664284, 0.669720,
0.675137, 0.680533, 0.685908, 0.691261, 0.696591, 0.701897, 0.707179, 0.712435,
0.717666, 0.722870, 0.728046, 0.733193, 0.738311, 0.743400, 0.748457, 0.753483,
0.758477, 0.763438, 0.768365, 0.773258, 0.778115, 0.782936, 0.787721, 0.792468,
0.797176, 0.801846, 0.806477, 0.811067, 0.815616, 0.820124, 0.824589, 0.829011,
0.833389, 0.837723, 0.842012, 0.846256, 0.850453, 0.854603, 0.858705, 0.862760,
0.866765, 0.870721, 0.874628, 0.878483, 0.882288, 0.886040, 0.889741, 0.893388,
0.896982, 0.900522, 0.904008, 0.907438, 0.910813, 0.914132, 0.917395, 0.920600,
0.923748, 0.926837, 0.929869, 0.932841, 0.935754, 0.938607, 0.941400, 0.944132,
0.946803, 0.949413, 0.951960, 0.954446, 0.956868, 0.959228, 0.961524, 0.963757,
0.965925, 0.968029, 0.970069, 0.972043, 0.973952, 0.975796, 0.977573, 0.979285,
0.980930, 0.982508, 0.984019, 0.985464, 0.986841, 0.988150, 0.989392, 0.990565,
0.991671, 0.992708, 0.993677, 0.994577, 0.995409, 0.996172, 0.996865, 0.997490,
0.998045, 0.998532, 0.998949, 0.999296, 0.999574, 0.999783, 0.999922, 0.999991,
0.999991, 0.999922, 0.999783, 0.999574, 0.999296, 0.998949, 0.998532, 0.998045,
0.997490, 0.996865, 0.996172, 0.995409, 0.994577, 0.993677, 0.992708, 0.991671,
0.990565, 0.989392, 0.988150, 0.986841, 0.985464, 0.984020, 0.982508, 0.980930,
0.979285, 0.977573, 0.975796, 0.973952, 0.972043, 0.970069, 0.968030, 0.965926,
0.963757, 0.961524, 0.959228, 0.956869, 0.954446, 0.951961, 0.949413, 0.946803,
0.944132, 0.941400, 0.938607, 0.935754, 0.932841, 0.929869, 0.926838, 0.923748,
0.920600, 0.917395, 0.914133, 0.910814, 0.907439, 0.904008, 0.900523, 0.896983,
0.893389, 0.889741, 0.886041, 0.882288, 0.878484, 0.874628, 0.870722, 0.866766,
0.862760, 0.858706, 0.854603, 0.850453, 0.846256, 0.842013, 0.837724, 0.833390,
0.829011, 0.824589, 0.820124, 0.815617, 0.811067, 0.806477, 0.801847, 0.797177,
0.792468, 0.787721, 0.782937, 0.778115, 0.773258, 0.768366, 0.763439, 0.758478,
0.753484, 0.748458, 0.743400, 0.738312, 0.733194, 0.728046, 0.722870, 0.717666,
0.712436, 0.707179, 0.701898, 0.696591, 0.691261, 0.685908, 0.680533, 0.675137,
0.669721, 0.664285, 0.658830, 0.653357, 0.647866, 0.642360, 0.636838, 0.631302,
0.625751, 0.620188, 0.614613, 0.609026, 0.603429, 0.597822, 0.592207, 0.586583,
0.580953, 0.575316, 0.569674, 0.564028, 0.558378, 0.552725, 0.547070, 0.541414,
0.535758, 0.530103, 0.524449, 0.518798, 0.513149, 0.507505, 0.501866, 0.496232,
0.490605, 0.484986, 0.479374, 0.473772, 0.468180, 0.462599, 0.457030, 0.451473,
0.445929, 0.440400, 0.434886, 0.429387, 0.423906, 0.418442, 0.412996, 0.407569,
0.402163, 0.396777, 0.391413, 0.386072, 0.380753, 0.375459, 0.370190, 0.364946,
0.359729, 0.354539, 0.349377, 0.344244, 0.339141, 0.334068, 0.329026, 0.324016,
0.319038, 0.314094, 0.309185, 0.304310, 0.299470, 0.294667, 0.289901, 0.285173,
0.280484, 0.275834, 0.271223, 0.266654, 0.262125, 0.257639, 0.253195, 0.248795,
0.244438, 0.240127, 0.235861, 0.231640, 0.227467, 0.223340, 0.219262, 0.215232,
0.211251, 0.207319, 0.203438, 0.199608, 0.195830, 0.192103, 0.188429, 0.184808,
0.181241, 0.177728, 0.174270, 0.170867, 0.167520, 0.164230, 0.160996, 0.157819,
0.154700, 0.151640, 0.148638, 0.145695, 0.142812, 0.139989, 0.137227, 0.134525,
0.131885, 0.129306, 0.126789, 0.124335, 0.121944, 0.119616, 0.117352, 0.115151,
0.113015, 0.110943, 0.108936, 0.106994, 0.105118, 0.103307, 0.101563, 0.099885,
0.098273, 0.096728, 0.095250, 0.093839, 0.092496, 0.091221, 0.090013, 0.088873,
0.087802, 0.086799, 0.085864, 0.084998, 0.084201, 0.083473, 0.082814, 0.082224,
0.081703, 0.081251, 0.080869, 0.080556, 0.080313, 0.080139, 0.080035, 0.080000};

static const float gaussWindow [512] = {
0.043937, 0.045023, 0.046131, 0.047262, 0.048416, 0.049594, 0.050795, 0.052021,
0.053271, 0.054545, 0.055845, 0.057171, 0.058522, 0.059900, 0.061304, 0.062735,
0.064193, 0.065679, 0.067192, 0.068734, 0.070305, 0.071905, 0.073534, 0.075193,
0.076882, 0.078601, 0.080351, 0.082132, 0.083945, 0.085789, 0.087665, 0.089574,
0.091516, 0.093491, 0.095499, 0.097542, 0.099618, 0.101729, 0.103874, 0.106055,
0.108271, 0.110523, 0.112810, 0.115135, 0.117495, 0.119893, 0.122328, 0.124800,
0.127311, 0.129859, 0.132445, 0.135071, 0.137735, 0.140438, 0.143180, 0.145962,
0.148784, 0.151646, 0.154548, 0.157491, 0.160474, 0.163498, 0.166563, 0.169670,
0.172817, 0.176007, 0.179238, 0.182511, 0.185825, 0.189182, 0.192581, 0.196023,
0.199507, 0.203033, 0.206602, 0.210213, 0.213867, 0.217564, 0.221303, 0.225086,
0.228911, 0.232778, 0.236688, 0.240641, 0.244637, 0.248675, 0.252756, 0.256879,
0.261044, 0.265251, 0.269500, 0.273792, 0.278124, 0.282499, 0.286915, 0.291371,
0.295869, 0.300408, 0.304986, 0.309605, 0.314264, 0.318963, 0.323700, 0.328477,
0.333292, 0.338145, 0.343037, 0.347965, 0.352931, 0.357933, 0.362972, 0.368046,
0.373155, 0.378299, 0.383477, 0.388689, 0.393934, 0.399211, 0.404521, 0.409862,
0.415233, 0.420635, 0.426066, 0.431526, 0.437014, 0.442530, 0.448072, 0.453641,
0.459234, 0.464852, 0.470494, 0.476158, 0.481845, 0.487553, 0.493281, 0.499029,
0.504795, 0.510579, 0.516380, 0.522197, 0.528029, 0.533874, 0.539733, 0.545604,
0.551486, 0.557378, 0.563279, 0.569188, 0.575104, 0.581026, 0.586953, 0.592883,
0.598816, 0.604750, 0.610685, 0.616619, 0.622551, 0.628480, 0.634404, 0.640323,
0.646236, 0.652140, 0.658036, 0.663921, 0.669795, 0.675656, 0.681503, 0.687335,
0.693150, 0.698948, 0.704727, 0.710485, 0.716222, 0.721936, 0.727626, 0.733291,
0.738929, 0.744539, 0.750120, 0.755670, 0.761189, 0.766674, 0.772125, 0.777541,
0.782919, 0.788259, 0.793560, 0.798819, 0.804037, 0.809211, 0.814341, 0.819424,
0.824461, 0.829449, 0.834387, 0.839274, 0.844109, 0.848891, 0.853618, 0.858289,
0.862903, 0.867459, 0.871955, 0.876391, 0.880765, 0.885076, 0.889323, 0.893505,
0.897621, 0.901669, 0.905649, 0.909559, 0.913399, 0.917167, 0.920862, 0.924484,
0.928031, 0.931503, 0.934898, 0.938216, 0.941455, 0.944615, 0.947695, 0.950694,
0.953611, 0.956445, 0.959197, 0.961863, 0.964445, 0.966942, 0.969352, 0.971675,
0.973910, 0.976057, 0.978115, 0.980083, 0.981962, 0.983750, 0.985447, 0.987052,
0.988565, 0.989986, 0.991314, 0.992548, 0.993689, 0.994736, 0.995689, 0.996547,
0.997311, 0.997980, 0.998553, 0.999031, 0.999414, 0.999701, 0.999892, 0.999988,
0.999988, 0.999892, 0.999701, 0.999414, 0.999031, 0.998553, 0.997980, 0.997311,
0.996547, 0.995689, 0.994736, 0.993689, 0.992548, 0.991314, 0.989986, 0.988565,
0.987052, 0.985447, 0.983750, 0.981962, 0.980083, 0.978115, 0.976057, 0.973910,
0.971675, 0.969352, 0.966942, 0.964445, 0.961863, 0.959197, 0.956445, 0.953611,
0.950694, 0.947695, 0.944615, 0.941455, 0.938216, 0.934898, 0.931503, 0.928031,
0.924484, 0.920862, 0.917167, 0.913399, 0.909559, 0.905649, 0.901669, 0.897621,
0.893505, 0.889323, 0.885076, 0.880765, 0.876391, 0.871955, 0.867459, 0.862903,
0.858289, 0.853618, 0.848891, 0.844109, 0.839274, 0.834387, 0.829449, 0.824461,
0.819424, 0.814341, 0.809211, 0.804037, 0.798819, 0.793560, 0.788259, 0.782919,
0.777541, 0.772125, 0.766674, 0.761189, 0.755670, 0.750120, 0.744539, 0.738929,
0.733291, 0.727626, 0.721936, 0.716222, 0.710485, 0.704727, 0.698948, 0.693150,
0.687335, 0.681503, 0.675656, 0.669795, 0.663921, 0.658036, 0.652140, 0.646236,
0.640323, 0.634404, 0.628480, 0.622551, 0.616619, 0.610685, 0.604750, 0.598816,
0.592883, 0.586953, 0.581026, 0.575104, 0.569188, 0.563279, 0.557378, 0.551486,
0.545604, 0.539733, 0.533874, 0.528029, 0.522197, 0.516380, 0.510579, 0.504795,
0.499029, 0.493281, 0.487553, 0.481845, 0.476158, 0.470494, 0.464852, 0.459234,
0.453641, 0.448072, 0.442530, 0.437014, 0.431526, 0.426066, 0.420635, 0.415233,
0.409862, 0.404521, 0.399211, 0.393934, 0.388689, 0.383477, 0.378299, 0.373155,
0.368046, 0.362972, 0.357933, 0.352931, 0.347965, 0.343037, 0.338145, 0.333292,
0.328477, 0.323700, 0.318963, 0.314264, 0.309605, 0.304986, 0.300408, 0.295869,
0.291371, 0.286915, 0.282499, 0.278124, 0.273792, 0.269500, 0.265251, 0.261044,
0.256879, 0.252756, 0.248675, 0.244637, 0.240641, 0.236688, 0.232778, 0.228911,
0.225086, 0.221303, 0.217564, 0.213867, 0.210213, 0.206602, 0.203033, 0.199507,
0.196023, 0.192581, 0.189182, 0.185825, 0.182511, 0.179238, 0.176007, 0.172817,
0.169670, 0.166563, 0.163498, 0.160474, 0.157491, 0.154548, 0.151646, 0.148784,
0.145962, 0.143180, 0.140438, 0.137735, 0.135071, 0.132445, 0.129859, 0.127311,
0.124800, 0.122328, 0.119893, 0.117495, 0.115135, 0.112810, 0.110523, 0.108271,
0.106055, 0.103874, 0.101729, 0.099618, 0.097542, 0.095499, 0.093491, 0.091516,
0.089574, 0.087665, 0.085789, 0.083945, 0.082132, 0.080351, 0.078601, 0.076882,
0.075193, 0.073534, 0.071905, 0.070305, 0.068734, 0.067192, 0.065679, 0.064193,
0.062735, 0.061304, 0.059900, 0.058522, 0.057171, 0.055845, 0.054545, 0.053271,
0.052021, 0.050795, 0.049594, 0.048416, 0.047262, 0.046131, 0.045023, 0.043937};

static const float nuttallWindow [512] = {
0.000000, 0.000002, 0.000007, 0.000016, 0.000029, 0.000046, 0.000066, 0.000090,
0.000119, 0.000151, 0.000188, 0.000230, 0.000276, 0.000327, 0.000383, 0.000445,
0.000513, 0.000586, 0.000665, 0.000752, 0.000845, 0.000945, 0.001053, 0.001169,
0.001294, 0.001427, 0.001570, 0.001723, 0.001885, 0.002059, 0.002244, 0.002441,
0.002650, 0.002873, 0.003109, 0.003359, 0.003624, 0.003904, 0.004201, 0.004514,
0.004845, 0.005194, 0.005563, 0.005951, 0.006359, 0.006789, 0.007241, 0.007716,
0.008215, 0.008738, 0.009287, 0.009862, 0.010465, 0.011095, 0.011755, 0.012445,
0.013166, 0.013919, 0.014704, 0.015524, 0.016379, 0.017269, 0.018197, 0.019162,
0.020167, 0.021212, 0.022298, 0.023426, 0.024597, 0.025813, 0.027075, 0.028383,
0.029738, 0.031143, 0.032597, 0.034102, 0.035660, 0.037271, 0.038936, 0.040656,
0.042433, 0.044268, 0.046162, 0.048115, 0.050129, 0.052206, 0.054345, 0.056549,
0.058818, 0.061153, 0.063556, 0.066027, 0.068567, 0.071178, 0.073860, 0.076615,
0.079443, 0.082345, 0.085322, 0.088375, 0.091505, 0.094712, 0.097998, 0.101364,
0.104809, 0.108336, 0.111943, 0.115633, 0.119406, 0.123263, 0.127203, 0.131228,
0.135338, 0.139533, 0.143814, 0.148182, 0.152636, 0.157178, 0.161807, 0.166523,
0.171327, 0.176218, 0.181198, 0.186266, 0.191421, 0.196665, 0.201996, 0.207415,
0.212921, 0.218514, 0.224194, 0.229961, 0.235814, 0.241752, 0.247775, 0.253883,
0.260075, 0.266349, 0.272706, 0.279145, 0.285664, 0.292263, 0.298941, 0.305696,
0.312528, 0.319435, 0.326417, 0.333471, 0.340597, 0.347793, 0.355058, 0.362390,
0.369787, 0.377248, 0.384771, 0.392355, 0.399998, 0.407697, 0.415451, 0.423258,
0.431115, 0.439021, 0.446974, 0.454971, 0.463010, 0.471089, 0.479205, 0.487356,
0.495539, 0.503753, 0.511993, 0.520259, 0.528547, 0.536854, 0.545178, 0.553516,
0.561865, 0.570222, 0.578585, 0.586950, 0.595314, 0.603675, 0.612030, 0.620375,
0.628708, 0.637024, 0.645322, 0.653598, 0.661849, 0.670071, 0.678262, 0.686418,
0.694536, 0.702613, 0.710646, 0.718631, 0.726565, 0.734444, 0.742267, 0.750028,
0.757726, 0.765357, 0.772917, 0.780403, 0.787813, 0.795143, 0.802390, 0.809550,
0.816621, 0.823599, 0.830482, 0.837266, 0.843948, 0.850525, 0.856995, 0.863354,
0.869600, 0.875730, 0.881740, 0.887628, 0.893392, 0.899029, 0.904536, 0.909910,
0.915149, 0.920251, 0.925214, 0.930034, 0.934710, 0.939239, 0.943619, 0.947849,
0.951926, 0.955848, 0.959613, 0.963220, 0.966666, 0.969951, 0.973072, 0.976029,
0.978819, 0.981441, 0.983894, 0.986177, 0.988289, 0.990228, 0.991994, 0.993586,
0.995003, 0.996245, 0.997310, 0.998199, 0.998910, 0.999444, 0.999800, 0.999978,
0.999978, 0.999800, 0.999444, 0.998910, 0.998199, 0.997310, 0.996245, 0.995003,
0.993586, 0.991994, 0.990228, 0.988289, 0.986177, 0.983894, 0.981441, 0.978819,
0.976029, 0.973072, 0.969951, 0.966666, 0.963220, 0.959613, 0.955848, 0.951926,
0.947849, 0.943619, 0.939239, 0.934710, 0.930034, 0.925214, 0.920251, 0.915149,
0.909910, 0.904536, 0.899029, 0.893392, 0.887628, 0.881740, 0.875730, 0.869600,
0.863354, 0.856995, 0.850525, 0.843948, 0.837266, 0.830482, 0.823599, 0.816621,
0.809550, 0.802390, 0.795143, 0.787813, 0.780403, 0.772917, 0.765357, 0.757726,
0.750028, 0.742267, 0.734444, 0.726565, 0.718631, 0.710646, 0.702613, 0.694536,
0.686418, 0.678262, 0.670071, 0.661849, 0.653598, 0.645322, 0.637024, 0.628708,
0.620375, 0.612030, 0.603675, 0.595314, 0.586950, 0.578585, 0.570222, 0.561865,
0.553516, 0.545178, 0.536854, 0.528547, 0.520259, 0.511993, 0.503753, 0.495539,
0.487356, 0.479205, 0.471089, 0.463010, 0.454971, 0.446974, 0.439021, 0.431115,
0.423258, 0.415451, 0.407697, 0.399998, 0.392355, 0.384771, 0.377248, 0.369787,
0.362390, 0.355058, 0.347793, 0.340597, 0.333471, 0.326417, 0.319435, 0.312528,
0.305696, 0.298941, 0.292263, 0.285664, 0.279145, 0.272706, 0.266349, 0.260075,
0.253883, 0.247775, 0.241752, 0.235814, 0.229961, 0.224194, 0.218514, 0.212921,
0.207415, 0.201996, 0.196665, 0.191421, 0.186266, 0.181198, 0.176218, 0.171327,
0.166523, 0.161807, 0.157178, 0.152636, 0.148182, 0.143814, 0.139533, 0.135337,
0.131228, 0.127203, 0.123262, 0.119406, 0.115633, 0.111943, 0.108336, 0.104809,
0.101364, 0.097998, 0.094712, 0.091505, 0.088375, 0.085322, 0.082345, 0.079443,
0.076615, 0.073860, 0.071178, 0.068567, 0.066027, 0.063556, 0.061153, 0.058818,
0.056549, 0.054345, 0.052206, 0.050129, 0.048115, 0.046162, 0.044268, 0.042433,
0.040656, 0.038936, 0.037271, 0.035660, 0.034102, 0.032597, 0.031143, 0.029738,
0.028383, 0.027075, 0.025813, 0.024597, 0.023426, 0.022298, 0.021212, 0.020167,
0.019162, 0.018197, 0.017269, 0.016379, 0.015524, 0.014704, 0.013919, 0.013166,
0.012445, 0.011755, 0.011095, 0.010465, 0.009862, 0.009287, 0.008738, 0.008215,
0.007716, 0.007241, 0.006789, 0.006359, 0.005951, 0.005563, 0.005194, 0.004845,
0.004514, 0.004201, 0.003904, 0.003624, 0.003359, 0.003109, 0.002873, 0.002650,
0.002441, 0.002244, 0.002059, 0.001885, 0.001723, 0.001570, 0.001427, 0.001294,
0.001169, 0.001053, 0.000945, 0.000845, 0.000752, 0.000665, 0.000586, 0.000513,
0.000445, 0.000383, 0.000327, 0.000276, 0.000230, 0.000188, 0.000151, 0.000119,
0.000090, 0.000066, 0.000046, 0.000029, 0.000016, 0.000007, 0.000002, 0.000000};

static const float blackmanNuttallWindow [512] = {
0.000363, 0.000366, 0.000375, 0.000389, 0.000410, 0.000436, 0.000469, 0.000508,
0.000553, 0.000604, 0.000662, 0.000727, 0.000799, 0.000878, 0.000965, 0.001059,
0.001161, 0.001271, 0.001390, 0.001518, 0.001656, 0.001802, 0.001959, 0.002126,
0.002305, 0.002494, 0.002695, 0.002909, 0.003135, 0.003374, 0.003627, 0.003895,
0.004177, 0.004475, 0.004789, 0.005120, 0.005468, 0.005834, 0.006219, 0.006623,
0.007047, 0.007492, 0.007959, 0.008448, 0.008960, 0.009496, 0.010056, 0.010642,
0.011255, 0.011894, 0.012561, 0.013258, 0.013984, 0.014740, 0.015528, 0.016349,
0.017203, 0.018091, 0.019015, 0.019975, 0.020972, 0.022007, 0.023082, 0.024197,
0.025352, 0.026550, 0.027792, 0.029077, 0.030408, 0.031785, 0.033209, 0.034681,
0.036203, 0.037776, 0.039400, 0.041076, 0.042806, 0.044590, 0.046430, 0.048327,
0.050281, 0.052294, 0.054366, 0.056500, 0.058694, 0.060952, 0.063273, 0.065659,
0.068110, 0.070628, 0.073214, 0.075867, 0.078590, 0.081383, 0.084247, 0.087183,
0.090192, 0.093274, 0.096431, 0.099662, 0.102969, 0.106353, 0.109814, 0.113352,
0.116970, 0.120666, 0.124442, 0.128298, 0.132235, 0.136253, 0.140352, 0.144534,
0.148798, 0.153145, 0.157575, 0.162089, 0.166685, 0.171366, 0.176131, 0.180979,
0.185912, 0.190928, 0.196029, 0.201214, 0.206482, 0.211834, 0.217270, 0.222789,
0.228390, 0.234075, 0.239841, 0.245689, 0.251618, 0.257627, 0.263717, 0.269886,
0.276133, 0.282458, 0.288860, 0.295338, 0.301891, 0.308518, 0.315219, 0.321991,
0.328834, 0.335747, 0.342728, 0.349775, 0.356889, 0.364067, 0.371307, 0.378609,
0.385970, 0.393389, 0.400864, 0.408394, 0.415976, 0.423610, 0.431292, 0.439021,
0.446794, 0.454611, 0.462469, 0.470364, 0.478297, 0.486263, 0.494261, 0.502289,
0.510344, 0.518423, 0.526525, 0.534646, 0.542784, 0.550937, 0.559102, 0.567276,
0.575456, 0.583640, 0.591825, 0.600009, 0.608187, 0.616359, 0.624520, 0.632668,
0.640799, 0.648912, 0.657002, 0.665068, 0.673105, 0.681111, 0.689084, 0.697019,
0.704914, 0.712766, 0.720571, 0.728328, 0.736031, 0.743680, 0.751270, 0.758798,
0.766262, 0.773658, 0.780984, 0.788235, 0.795410, 0.802506, 0.809518, 0.816445,
0.823284, 0.830031, 0.836684, 0.843239, 0.849695, 0.856047, 0.862294, 0.868433,
0.874461, 0.880375, 0.886173, 0.891852, 0.897410, 0.902843, 0.908151, 0.913330,
0.918378, 0.923293, 0.928072, 0.932713, 0.937215, 0.941575, 0.945791, 0.949861,
0.953784, 0.957557, 0.961179, 0.964648, 0.967963, 0.971121, 0.974122, 0.976964,
0.979647, 0.982167, 0.984525, 0.986719, 0.988748, 0.990612, 0.992309, 0.993839,
0.995200, 0.996393, 0.997416, 0.998270, 0.998953, 0.999466, 0.999808, 0.999979,
0.999979, 0.999808, 0.999466, 0.998953, 0.998270, 0.997416, 0.996393, 0.995200,
0.993839, 0.992309, 0.990612, 0.988748, 0.986719, 0.984525, 0.982167, 0.979646,
0.976964, 0.974122, 0.971121, 0.967963, 0.964648, 0.961179, 0.957557, 0.953784,
0.949861, 0.945791, 0.941575, 0.937215, 0.932713, 0.928072, 0.923293, 0.918378,
0.913330, 0.908151, 0.902843, 0.897410, 0.891852, 0.886173, 0.880375, 0.874461,
0.868433, 0.862294, 0.856047, 0.849695, 0.843239, 0.836684, 0.830031, 0.823284,
0.816445, 0.809518, 0.802506, 0.795410, 0.788235, 0.780983, 0.773658, 0.766262,
0.758798, 0.751270, 0.743680, 0.736031, 0.728328, 0.720571, 0.712766, 0.704914,
0.697019, 0.689084, 0.681111, 0.673105, 0.665068, 0.657002, 0.648912, 0.640799,
0.632668, 0.624520, 0.616359, 0.608187, 0.600009, 0.591825, 0.583640, 0.575456,
0.567275, 0.559102, 0.550937, 0.542784, 0.534646, 0.526525, 0.518423, 0.510344,
0.502289, 0.494261, 0.486263, 0.478297, 0.470364, 0.462469, 0.454611, 0.446794,
0.439021, 0.431292, 0.423610, 0.415976, 0.408394, 0.400864, 0.393389, 0.385970,
0.378609, 0.371307, 0.364067, 0.356889, 0.349775, 0.342728, 0.335747, 0.328834,
0.321991, 0.315219, 0.308518, 0.301891, 0.295338, 0.288860, 0.282458, 0.276133,
0.269886, 0.263717, 0.257627, 0.251618, 0.245689, 0.239841, 0.234075, 0.228390,
0.222789, 0.217270, 0.211834, 0.206482, 0.201214, 0.196029, 0.190928, 0.185912,
0.180979, 0.176131, 0.171366, 0.166685, 0.162089, 0.157575, 0.153145, 0.148798,
0.144534, 0.140352, 0.136253, 0.132235, 0.128298, 0.124442, 0.120666, 0.116970,
0.113352, 0.109814, 0.106353, 0.102969, 0.099662, 0.096431, 0.093274, 0.090192,
0.087183, 0.084247, 0.081383, 0.078590, 0.075867, 0.073214, 0.070628, 0.068110,
0.065659, 0.063273, 0.060952, 0.058694, 0.056500, 0.054366, 0.052294, 0.050281,
0.048327, 0.046430, 0.044590, 0.042806, 0.041076, 0.039400, 0.037776, 0.036203,
0.034681, 0.033209, 0.031785, 0.030408, 0.029077, 0.027792, 0.026550, 0.025352,
0.024196, 0.023082, 0.022007, 0.020972, 0.019975, 0.019015, 0.018091, 0.017203,
0.016349, 0.015528, 0.014740, 0.013984, 0.013258, 0.012561, 0.011894, 0.011255,
0.010642, 0.010056, 0.009496, 0.008960, 0.008448, 0.007959, 0.007492, 0.007047,
0.006623, 0.006219, 0.005834, 0.005468, 0.005120, 0.004789, 0.004475, 0.004177,
0.003895, 0.003627, 0.003374, 0.003135, 0.002909, 0.002695, 0.002494, 0.002305,
0.002126, 0.001959, 0.001802, 0.001656, 0.001518, 0.001390, 0.001271, 0.001161,
0.001059, 0.000965, 0.000878, 0.000799, 0.000727, 0.000662, 0.000604, 0.000553,
0.000508, 0.000469, 0.000436, 0.000410, 0.000389, 0.000375, 0.000366, 0.000363};

static const float blackmanHarrisWindow [512] = {
0.000060, 0.000062, 0.000069, 0.000079, 0.000094, 0.000114, 0.000138, 0.000167,
0.000200, 0.000238, 0.000282, 0.000330, 0.000384, 0.000444, 0.000509, 0.000581,
0.000659, 0.000744, 0.000835, 0.000935, 0.001041, 0.001156, 0.001279, 0.001411,
0.001553, 0.001704, 0.001865, 0.002037, 0.002220, 0.002415, 0.002622, 0.002841,
0.003074, 0.003321, 0.003582, 0.003859, 0.004151, 0.004460, 0.004786, 0.005130,
0.005492, 0.005873, 0.006275, 0.006697, 0.007141, 0.007607, 0.008096, 0.008609,
0.009147, 0.009711, 0.010301, 0.010919, 0.011565, 0.012240, 0.012946, 0.013682,
0.014451, 0.015252, 0.016088, 0.016958, 0.017865, 0.018808, 0.019790, 0.020810,
0.021871, 0.022972, 0.024116, 0.025303, 0.026534, 0.027811, 0.029134, 0.030504,
0.031923, 0.033392, 0.034911, 0.036482, 0.038106, 0.039784, 0.041517, 0.043307,
0.045153, 0.047058, 0.049022, 0.051046, 0.053132, 0.055281, 0.057493, 0.059769,
0.062112, 0.064521, 0.066997, 0.069542, 0.072157, 0.074842, 0.077599, 0.080428,
0.083330, 0.086307, 0.089358, 0.092485, 0.095689, 0.098971, 0.102330, 0.105769,
0.109287, 0.112885, 0.116565, 0.120326, 0.124169, 0.128095, 0.132104, 0.136197,
0.140374, 0.144635, 0.148982, 0.153414, 0.157931, 0.162535, 0.167224, 0.172000,
0.176862, 0.181810, 0.186845, 0.191966, 0.197174, 0.202468, 0.207848, 0.213314,
0.218866, 0.224503, 0.230225, 0.236032, 0.241922, 0.247897, 0.253954, 0.260094,
0.266315, 0.272618, 0.279000, 0.285462, 0.292003, 0.298621, 0.305315, 0.312084,
0.318928, 0.325845, 0.332833, 0.339893, 0.347021, 0.354216, 0.361478, 0.368805,
0.376195, 0.383646, 0.391156, 0.398725, 0.406350, 0.414029, 0.421760, 0.429542,
0.437371, 0.445247, 0.453168, 0.461129, 0.469131, 0.477170, 0.485244, 0.493350,
0.501487, 0.509651, 0.517840, 0.526052, 0.534284, 0.542533, 0.550797, 0.559072,
0.567357, 0.575648, 0.583943, 0.592238, 0.600530, 0.608818, 0.617097, 0.625365,
0.633619, 0.641856, 0.650072, 0.658265, 0.666432, 0.674568, 0.682673, 0.690741,
0.698770, 0.706758, 0.714700, 0.722593, 0.730435, 0.738222, 0.745951, 0.753618,
0.761222, 0.768758, 0.776223, 0.783615, 0.790930, 0.798165, 0.805316, 0.812382,
0.819358, 0.826243, 0.833032, 0.839723, 0.846312, 0.852798, 0.859177, 0.865446,
0.871603, 0.877644, 0.883567, 0.889370, 0.895049, 0.900602, 0.906027, 0.911321,
0.916482, 0.921507, 0.926394, 0.931141, 0.935745, 0.940204, 0.944517, 0.948681,
0.952694, 0.956554, 0.960261, 0.963810, 0.967203, 0.970435, 0.973507, 0.976416,
0.979161, 0.981741, 0.984155, 0.986401, 0.988479, 0.990387, 0.992125, 0.993691,
0.995085, 0.996306, 0.997354, 0.998228, 0.998928, 0.999453, 0.999803, 0.999978,
0.999978, 0.999803, 0.999453, 0.998928, 0.998228, 0.997354, 0.996306, 0.995085,
0.993691, 0.992125, 0.990387, 0.988479, 0.986401, 0.984155, 0.981741, 0.979161,
0.976416, 0.973507, 0.970435, 0.967203, 0.963810, 0.960260, 0.956554, 0.952694,
0.948681, 0.944517, 0.940204, 0.935745, 0.931141, 0.926394, 0.921507, 0.916482,
0.911321, 0.906027, 0.900602, 0.895049, 0.889370, 0.883567, 0.877644, 0.871603,
0.865446, 0.859177, 0.852798, 0.846312, 0.839722, 0.833032, 0.826243, 0.819358,
0.812382, 0.805316, 0.798165, 0.790930, 0.783615, 0.776223, 0.768758, 0.761222,
0.753618, 0.745951, 0.738222, 0.730435, 0.722593, 0.714700, 0.706758, 0.698770,
0.690741, 0.682673, 0.674568, 0.666432, 0.658265, 0.650072, 0.641856, 0.633619,
0.625365, 0.617097, 0.608818, 0.600530, 0.592238, 0.583942, 0.575648, 0.567357,
0.559072, 0.550797, 0.542533, 0.534284, 0.526052, 0.517840, 0.509651, 0.501487,
0.493350, 0.485244, 0.477170, 0.469131, 0.461129, 0.453168, 0.445247, 0.437371,
0.429542, 0.421760, 0.414029, 0.406350, 0.398725, 0.391156, 0.383646, 0.376195,
0.368805, 0.361478, 0.354216, 0.347021, 0.339893, 0.332833, 0.325845, 0.318928,
0.312084, 0.305315, 0.298621, 0.292003, 0.285462, 0.279000, 0.272618, 0.266315,
0.260094, 0.253954, 0.247897, 0.241922, 0.236032, 0.230225, 0.224503, 0.218866,
0.213314, 0.207848, 0.202468, 0.197174, 0.191966, 0.186845, 0.181810, 0.176862,
0.172000, 0.167224, 0.162535, 0.157931, 0.153414, 0.148982, 0.144635, 0.140374,
0.136197, 0.132104, 0.128095, 0.124169, 0.120326, 0.116565, 0.112885, 0.109287,
0.105769, 0.102330, 0.098971, 0.095689, 0.092485, 0.089358, 0.086307, 0.083330,
0.080428, 0.077599, 0.074842, 0.072157, 0.069542, 0.066997, 0.064521, 0.062112,
0.059769, 0.057493, 0.055281, 0.053132, 0.051046, 0.049022, 0.047058, 0.045153,
0.043307, 0.041517, 0.039784, 0.038106, 0.036482, 0.034911, 0.033392, 0.031923,
0.030504, 0.029134, 0.027811, 0.026534, 0.025303, 0.024116, 0.022972, 0.021871,
0.020810, 0.019790, 0.018808, 0.017865, 0.016958, 0.016088, 0.015252, 0.014451,
0.013682, 0.012946, 0.012240, 0.011565, 0.010919, 0.010301, 0.009711, 0.009147,
0.008609, 0.008096, 0.007607, 0.007141, 0.006697, 0.006275, 0.005873, 0.005492,
0.005130, 0.004786, 0.004460, 0.004151, 0.003859, 0.003582, 0.003321, 0.003074,
0.002841, 0.002621, 0.002415, 0.002220, 0.002037, 0.001865, 0.001704, 0.001553,
0.001411, 0.001279, 0.001156, 0.001041, 0.000935, 0.000835, 0.000744, 0.000659,
0.000581, 0.000509, 0.000444, 0.000384, 0.000330, 0.000282, 0.000238, 0.000200,
0.000167, 0.000138, 0.000114, 0.000094, 0.000079, 0.000069, 0.000062, 0.000060};


QByteArray czop(const QByteArray & str){  // this function chop all characters from QByteArray which are not Digits
    QByteArray ret;

    Q_FOREACH(QChar c , str){
        if( c.isDigit())
            ret += c;
    }
    return ret;
}

QVector<double> correlation(double* p_sigA, double* p_sigB, int size){ // sigA and sigB must have the same size

    QVector<double> out;
    double tmp ;

    int          n = bufferSize  ;
    int delayLimit = 500         ;   // approx for 512 x 48000 x 1m distance
    int delay                    ;
    int        i = 0 ,     j = 0 ,    k = 0 , m = 0;
    double meanA = 0 , meanB = 0 ;
    double    sA = 0 ,    sB = 0 , sTmp = 0 ;
    double         normalize = 0 ;

    for( i=0 ; i<n ; i++){
        meanA += p_sigA[i];
        meanB += p_sigB[i];
    }
    meanA = meanA/n;    // rescale mean value
    meanB = meanB/n;    // of both signals

    for ( i=0 ; i<n ; i++){
        sA += (p_sigA[i]-meanA) * (p_sigA[i]-meanA);
        sB += (p_sigB[i]-meanB) * (p_sigB[i]-meanB);
    }

    normalize = sqrt(sA*sB);

    for( delay = 0, k = 0 ; delay < delayLimit; delay++, k++){
        sTmp = 0 ;
        tmp  = 0 ;
        for(m=0 ; m<n ; m++){
            j = m + delay;
            if ((j < 0) || (j>= n))
                continue;
            else
                sTmp += (p_sigA[m] - meanA) * (p_sigB[m] - meanB);
        }
        tmp = sTmp/normalize;
        out.append(tmp);
        //qDebug() << out.at(delay);
    }

    normalize = 0 ;
    return out;

}

trakkermodel::trakkermodel(){
    chosenSignals       = 0            ; // default draw correlation of signals (0) 1-2 ; (1) 1-3; (2) 1-4; (3) 2-3; (4) 2-4; (5) 3-4
    connectionState     = 0            ;
    continousCapturing  = FALSE        ;
    continousCaptureReq = FALSE        ;
    correlationType     = 0            ;
    stateOfHandling     = 0            ;
    tcpServerAddress    = "192.168.1.5";
    tcpPort             = 40000        ;
    windowType          = 0            ;
    samplingFreq        = 44000        ;
    b_correlationDone   = FALSE        ;

    corrColor.resize(6);
    corrColor.fill('b');
    corrVisible.resize(6);
    corrVisible.fill(FALSE);

    inputData.resize(4*2*bufferSize)   ;
    m_windowShape.resize(bufferSize)   ;

    q_pSocket = new QTcpSocket(this);

    connect ( q_pSocket, SIGNAL(readyRead()), this,SLOT(readTcp()));
}

trakkermodel::~trakkermodel(){
    q_pSocket->abort();
}


void trakkermodel::appendCorrToView(int posOfColor){
    char character;
    switch(posOfColor){
        case 0:
                character = 'b'; // blues
                break;
        case 1:
                character = 'r'; // red
                break;
        case 2:
                character = 'g'; //green
                break;
        case 3:
                character = 'k'; //blacK
                break;
        case 4:
                character = 'c'; // cyan
                break;
        case 5:
                character = 'm'; //magenta
                break;
        default:
                character = 'b'; // default blue
                break;
    }

    switch(chosenSignals){
        case 0:
                corrColor[0]   = character;
                corrVisible[0] = TRUE     ;
                break;
        case 1:
                corrColor[1]   = character;
                corrVisible[1] = TRUE     ;
                break;
        case 2:
                corrColor[2]   = character;
                corrVisible[2] = TRUE     ;
                break;
        case 3:
                corrColor[3]   = character;
                corrVisible[3] = TRUE     ;
                break;
        case 4:
                corrColor[4]   = character;
                corrVisible[4] = TRUE     ;
                break;

        case 5:
                corrColor[5]   = character;
                corrVisible[5] = TRUE     ;
                break;

        default:
                qDebug() << "Chosen signal ma wartosci spoza 0-5";
                break;
    }

}

void trakkermodel::clearDisplay(){
    emit sigDrawLine(0,0,0,0,0);
    emit sigDrawLine(1,0,0,0,0);
    emit sigDrawLine(2,0,0,0,0);
    emit sigDrawLine(3,0,0,0,0);
}

void trakkermodel::clearCorrView(){
     emit sigDrawLine (9,0,0,0,0);
     corrVisible.fill(FALSE,6);
}

void trakkermodel::displayInput(){

    for (int i = 0 ; i< inputPlotWidth -1 ; i++){
        emit sigDrawLine(0, i, m_triggeredData[i]/8, i+1,                                  m_triggeredData[i+1]/8 );
        emit sigDrawLine(1, i, m_triggeredData[bufferSize+i]/8, i+1,                       m_triggeredData[bufferSize+i+1]/8 );
        emit sigDrawLine(2, i, m_triggeredData[bufferSize+bufferSize+i]/8, i+1,            m_triggeredData[bufferSize+bufferSize+i+1]/8 );
        emit sigDrawLine(3, i, m_triggeredData[bufferSize+bufferSize+bufferSize+i]/8, i+1, m_triggeredData[bufferSize+bufferSize+bufferSize+i+1]/8 );
    }
}

void trakkermodel::displayCorrelation(){
    if (TRUE==b_correlationDone){
    switch(chosenSignals){
        //qDebug() << chosenSignals ;
        case(0):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr12.at(i) , i+1 , 512*corr12.at(i+1) ,corrColor.at(0) );
                }
                break;

        case(1):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr13.at(i) , i+1 , 512*corr13.at(i+1) ,corrColor.at(1) );
                }
                break;

        case(2):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr14.at(i) , i+1 , 512*corr14.at(i+1) ,corrColor.at(2) );
                }
                break;
        case(3):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr23.at(i) , i+1 , 512*corr23.at(i+1) ,corrColor.at(3) );
                }
                break;

        case(4):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr24.at(i) , i+1 , 512*corr24.at(i+1) ,corrColor.at(4) );
                }
                break;

        case(5):
                for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
                    emit sigDrawLine(9, i , 512*corr34.at(i) , i+1 , 512*corr34.at(i+1) ,corrColor.at(5) );
                }
                break;

         default:
                break;
    }
    }else
        setStatus("Calculate CrossCorrelation first",4000);
}

void trakkermodel::handleInputData( ){ // handle data from ethernet

    if ( connectionState < 1 ){ // not connected or failed
        emit sigSetStatus("Connect to server via Ethernet before capturing data",4000);

    }else{
        if(connectionState == 1){ // is connected
            QByteArray command("",4);
            if ( -1 == q_pSocket->write(command))
                qDebug() << "error " ;

            if(continousCaptureReq == 1)
                continousCapturing = 0;
        }
    }
}

void trakkermodel::setWindowing(int window){   // type i.e. 0 rectangular; 1 triangular; 2 blackman; 3 hamming; 4 gauss; 5 nuttall; 6 blackman-hamming; 7 blackman-nuttall

    this->windowType = window ;

    switch (window)
    {

        case 7: // blackman Nuttall
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*blackmanNuttallWindow[4*i] , i+1 ,99- 90*blackmanNuttallWindow[4*i + 4]);
                }
                break;

        case 6: // blackman-harris
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*blackmanHarrisWindow[4*i] , i+1 ,99- 90*blackmanHarrisWindow[4*i + 4]);
                }
                break;

        case 5: // nuttall
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*nuttallWindow[4*i] , i+1 ,99- 90*nuttallWindow[4*i + 4]);
                }
                break;

        case 4: // gauss
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*gaussWindow[4*i] , i+1 ,99- 90*gaussWindow[4*i + 4]);
                }
                break;

        case 3: // hamming
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*hammingWindow[4*i] , i+1 ,99- 90*hammingWindow[4*i + 4]);
                }
                break;

        case 2: // blackman
                emit sigDrawLine(4, 0, 0, 0, 0); // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*blackmanWindow[4*i] , i+1 ,99- 90*blackmanWindow[4*i + 4]);
                }
                break;

        case 1:
                emit sigDrawLine(4, 0, 0, 0, 0);    // clean display

                for(int i = 0 ; i < windowPlotWidth -1 ; i++){
                    emit sigDrawLine(4,i  ,99- 90*triangularWindow[4*i] , i+1 ,99- 90*triangularWindow[4*i + 4]);
                }

                break;

        case 0:

        default:
                emit sigDrawLine(4, 0, 0, 0, 0);    //clean display

                emit sigDrawLine(4,  0,99, 10,99);    // draw lines
                emit sigDrawLine(4, 10,99, 10, 0);
                emit sigDrawLine(4, 10,0 ,118, 0);
                emit sigDrawLine(4,118,0 ,118,99);
                emit sigDrawLine(4,118,99,128,99);

                this->windowType = 0;
                qDebug("Default value in trakkermodel::setWindowing \n");
                break;

    }
}

void trakkermodel::setCorrelation(int type){
    this->correlationType = type ;
}

void trakkermodel::startTransfer(){ // this function should transfer data trough ethernet
    continousCapturing = continousCaptureReq ;
    setWindowing(windowType);
    handleInputData();
}

void trakkermodel::stopTransfer(){ // this function should stop capturing data
    continousCapturing = 0 ;
    handleInputData();
}

void trakkermodel::runCorrelation(){  // if all signals have to be processed ? or better (int int) choose 3 signals to process CrossCorrelation?

    emit sigDrawLine(9,0,0,0,0); // clear screen
    int i = 0;

    corr12 = correlation(&windowedSignals[0][0], &windowedSignals[0][1], 512);
    corr13 = correlation(&windowedSignals[0][0], &windowedSignals[0][2], 512);
    corr14 = correlation(&windowedSignals[0][0], &windowedSignals[0][3], 512);
    corr23 = correlation(&windowedSignals[0][1], &windowedSignals[0][2], 512);
    corr24 = correlation(&windowedSignals[0][1], &windowedSignals[0][3], 512);
    corr34 = correlation(&windowedSignals[0][2], &windowedSignals[0][3], 512);

    b_correlationDone = TRUE ;

    fftw_complex *ff1, *ff2;  // made regarding to fftw3.pdf p.9
    fftw_plan fftplan;

    ff1     = (fftw_complex *) fftw_malloc(sizeof(fftw_complex)*bufferSize) ;
    ff2     = (fftw_complex *) fftw_malloc(sizeof(fftw_complex)*bufferSize) ;

    for (i = 0 ; i < bufferSize; ++i){
        ff1[i] = (double) windowedSignals[i][0];
    }

    fftplan = fftw_plan_dft_1d(bufferSize, ff1, ff2, FFTW_FORWARD, FFTW_ESTIMATE);

    fftw_execute(fftplan);

    fftw_destroy_plan(fftplan);

   // displayCorrelation();

    //for (i = 0 ; i < bufferSize ; i++)
        //ff2[i] *= normFactor ;


//    for(int i = 0 ; i < correlationPlotWidth - 30 ; i++){ // draw result
//        //emit sigDrawLine(9,2*i  ,creal(ff2[2*i]) , 2*i+1, creal( ff2[2*i+1]));
//        //qDebug() << i ;
//        emit sigDrawLine(9, i , 512*corrOut.at(i) , i+1 , 512*corrOut.at(i+1) );
//    }
}

void trakkermodel::runWindowing(){
   switch (this->windowType)
    {
        case 7:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * blackmanHarrisWindow[i] * m_triggeredData[i               ]; // m_triggeredData contain 10 valid bits
                this->windowedSignals[i][1] = 512 + 0.5 * blackmanHarrisWindow[i] * m_triggeredData[i + bufferSize  ]; // so 1024 values
                this->windowedSignals[i][2] = 512 + 0.5 * blackmanHarrisWindow[i] * m_triggeredData[i + bufferSize*2]; // relative level '0' is
                this->windowedSignals[i][3] = 512 + 0.5 * blackmanHarrisWindow[i] * m_triggeredData[i + bufferSize*3];
            }
            break;

        case 6:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * blackmanNuttallWindow[i] * m_triggeredData[i               ];
                this->windowedSignals[i][1] = 512 + 0.5 * blackmanNuttallWindow[i] * m_triggeredData[i + bufferSize  ];
                this->windowedSignals[i][2] = 512 + 0.5 * blackmanNuttallWindow[i] * m_triggeredData[i + bufferSize*2];
                this->windowedSignals[i][3] = 512 + 0.5 * blackmanNuttallWindow[i] * m_triggeredData[i + bufferSize*3];
            }
            break;

        case 5:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * nuttallWindow[i] * m_triggeredData[i               ];
                this->windowedSignals[i][1] = 512 + 0.5 * nuttallWindow[i] * m_triggeredData[i + bufferSize  ];
                this->windowedSignals[i][2] = 512 + 0.5 * nuttallWindow[i] * m_triggeredData[i + bufferSize*2];
                this->windowedSignals[i][3] = 512 + 0.5 * nuttallWindow[i] * m_triggeredData[i + bufferSize*3];
            }
            break;

        case 4:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * gaussWindow[i] * m_triggeredData[i                ];
                this->windowedSignals[i][1] = 512 + 0.5 * gaussWindow[i] * m_triggeredData[i + bufferSize   ];
                this->windowedSignals[i][2] = 512 + 0.5 * gaussWindow[i] * m_triggeredData[i + bufferSize*2 ];
                this->windowedSignals[i][3] = 512 + 0.5 * gaussWindow[i] * m_triggeredData[i + bufferSize*3 ];
            }
            break;

        case 3:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * hammingWindow[i] * m_triggeredData[i                ];
                this->windowedSignals[i][1] = 512 + 0.5 * hammingWindow[i] * m_triggeredData[i + bufferSize   ];
                this->windowedSignals[i][2] = 512 + 0.5 * hammingWindow[i] * m_triggeredData[i + bufferSize*2 ];
                this->windowedSignals[i][3] = 512 + 0.5 * hammingWindow[i] * m_triggeredData[i + bufferSize*3 ];
            }
            break;

        case 2:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * blackmanWindow[i] * m_triggeredData[i                ];
                this->windowedSignals[i][1] = 512 + 0.5 * blackmanWindow[i] * m_triggeredData[i + bufferSize   ];
                this->windowedSignals[i][2] = 512 + 0.5 * blackmanWindow[i] * m_triggeredData[i + bufferSize*2 ];
                this->windowedSignals[i][3] = 512 + 0.5 * blackmanWindow[i] * m_triggeredData[i + bufferSize*3 ];
            }
            break;

        case 1:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * triangularWindow[i] * m_triggeredData[i                ];
                this->windowedSignals[i][1] = 512 + 0.5 * triangularWindow[i] * m_triggeredData[i + bufferSize   ];
                this->windowedSignals[i][2] = 512 + 0.5 * triangularWindow[i] * m_triggeredData[i + bufferSize*2 ];
                this->windowedSignals[i][3] = 512 + 0.5 * triangularWindow[i] * m_triggeredData[i + bufferSize*3 ];
            }
            break;

        case 0:
            for(int i = 0 ; i < bufferSize ; ++i){
                this->windowedSignals[i][0] = 512 + 0.5 * rectangularWindow[i] * m_triggeredData[i                ];
                this->windowedSignals[i][1] = 512 + 0.5 * rectangularWindow[i] * m_triggeredData[i + bufferSize   ];
                this->windowedSignals[i][2] = 512 + 0.5 * rectangularWindow[i] * m_triggeredData[i + bufferSize*2 ];
                this->windowedSignals[i][3] = 512 + 0.5 * rectangularWindow[i] * m_triggeredData[i + bufferSize*3 ];
            }
            break;

        default:
            qDebug("default value in trakkermodel::setWindowing function");
            break;
    } //end switch

    emit sigDrawLine(5,0,0,0,0); //clear windowedSignal plot area ;
    emit sigDrawLine(6,0,0,0,0); //clear windowedSignal plot area ;
    emit sigDrawLine(7,0,0,0,0); //clear windowedSignal plot area ;
    emit sigDrawLine(8,0,0,0,0); //clear windowedSignal plot area ;

    // emit sigDrawLine(5,0,64,250,64);  todo make a frame around window

    for(int i = 0 ; i < windowedPlotWidth -1 ; i++){
        emit sigDrawLine(5,i  ,127- this->windowedSignals[2*i][0]/8 , i+1 ,127- windowedSignals[2*i + 2][0]/8);
        emit sigDrawLine(6,i  ,127- this->windowedSignals[2*i][1]/8 , i+1 ,127- windowedSignals[2*i + 2][1]/8);
        emit sigDrawLine(7,i  ,127- this->windowedSignals[2*i][2]/8 , i+1 ,127- windowedSignals[2*i + 2][2]/8);
        emit sigDrawLine(8,i  ,127- this->windowedSignals[2*i][3]/8 , i+1 ,127- windowedSignals[2*i + 2][3]/8);
    }
}

void trakkermodel::setSignals(int whichSig){
    this->chosenSignals = whichSig ;
    //displayCorrelation();
}

void trakkermodel::setStatus(QString text, int sec){
    emit sigSetStatus(text, sec);
}

void trakkermodel::setConnection(){

    connect ( q_pSocket,SIGNAL( error ( QAbstractSocket::SocketError) ),this,SLOT(tcpError( QAbstractSocket::SocketError ))) ;

    if (connectionState == 1){ // connection already set sucesfully
        emit sigSetStatus("Already connected",2000);
    }
    else {
        if (connectionState < 1){ // connection not set ('0') or failed ('-1)        
            q_pSocket->connectToHost( tcpServerAddress, tcpPort);

            if (q_pSocket->waitForConnected(3000)==false){
                emit sigSetStatus("Failed to connect TCP Socket to server",2000);
                qDebug("Failed to connect inside setConnection\n");
                connectionState = -1 ;
            }else{
                emit sigSetStatus("TCP connection estabilished sucessfully",2000);
                connectionState = 1 ;
            }

        }
    }


}

void trakkermodel::setDisconnection(){
    q_pSocket->disconnectFromHost();
    connectionState = 0 ;
}

void trakkermodel::tcpError( QAbstractSocket::SocketError socketError ) {
    qDebug() << socketError ;
}

void trakkermodel::setContinousCapturing(bool flag){   //TODO continous capturing
    this->continousCaptureReq  = flag;
}

void trakkermodel::readTcp(){
    QByteArray m_tcpBuffer = q_pSocket->read(q_pSocket->bytesAvailable());
    if (m_tcpBuffer.size() % 2 == 0 ) { // if 'a' has even elements
        for ( int i = 0 ; i < m_tcpBuffer.size() - 1 ; i+=2 ) {
            char one =m_tcpBuffer.at(i);
            char two = m_tcpBuffer.at(i+1) ;
            m_parsedData.push_back( (short)((int)two)*256 + (int)one );
        }
    }else{ //if 'a' has odd elements
        for ( int i = 0 ; i < m_tcpBuffer.size() - 1 ; i+=2 ) {
            char one =m_tcpBuffer.at(i);
            char two = m_tcpBuffer.at(i+1) ;
            m_parsedData.push_back( (short)((int)two)*256 + (int)one );
        }

    }

    if ( (4*bufferSize) < m_parsedData.size() ){ // if there is enough elements to fill the m_triggeredData data set - Just do it.

        m_triggeredData = m_parsedData;
        m_triggeredData.remove(2048 , m_parsedData.size()-2048  ) ;
        m_parsedData.remove(0, 2048);// erase elements rewritten to m_triggeredData


        clearDisplay();
        displayInput();
        if (TRUE==continousCapturing)     // after each full data set ask kindly for next one
            handleInputData();
    }

}

